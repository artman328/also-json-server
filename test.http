@host = localhost
@port = 3000
@path =

@url = {{host}}:{{port}}{{path}}

# ------------------------------------------------------
# Post-Comments: One to Many Relationship
# ------------------------------------------------------
# posts: [
#    {id: "1", title: "a title", views: 100},
#    ...
# ]
#
# comments: [
#    {id: "1", text: "...", postId: "1"},
#    ...
# ]
#

### 1. Get all Posts
GET http://{{url}}/posts

### 2. Get all Posts with their Comments (embeded)
GET http://{{url}}/posts?_embed=comments

### 3. Get a Post
GET http://{{url}}/posts/1

### 4. Get a Post with its Comments (embeded)
GET http://{{url}}/posts/1?_embed=comments

### 5. Get all Comments
http://{{url}}/comments

### 6. Get Comments with the target Post (embeded)
GET http://{{url}}/comments?_embed=post

### 7. Create a post with an exists Id
POST http://{{url}}/posts
Content-Type: application/json

{"id":1, "title":"my new post", "views": 0}

### 8. Create a post without an Id
POST http://{{url}}/posts
Content-Type: application/json

{"title":"my new post", "views": 0}

### 9. Pactch the newly added post
PATCH http://{{url}}/posts/3
Content-Type: application/json

{"views": 1}

### 10. Put the newly added post
PUT http://{{url}}/posts/3
Content-Type: application/json

{"title": "My New Post"}

### 11. Create a comment with invalid foreign key
POST http://{{url}}/comments
Content-Type: application/json

{"id":3, "text":"comment on post 3", "postId":30}

### 12. Create a comment with a valid foreign key
POST http://{{url}}/comments
Content-Type: application/json

{"text":"comment on post 3", "postId":3}

### 13. Update (PATCH) the comment to an invalid foreign key
PATCH http://{{url}}/comments/3
Content-Type: application/json

{"postId":"50"}

### 14. Update (PUT) the comment to an invalid foreign key
PUT http://{{url}}/comments/3
Content-Type: application/json

{"text":"Good Post!","postId":50}

### 15. Delete a post will remove the one to many relationship
# _dependent make the related comments deleted
# without it, the related comments' foreignkeys will be set to null 
DELETE http://{{url}}/posts/3?_dependent=comments

### 16. Confirm all comments on post 3 are all gone
GET http://{{url}}/comments?postId=3



# ----------------------------------------------------------
# Contacts_Groups: Many to Many Relationship
# ----------------------------------------------------------
# contacts: [
#   {id: "1", name: "Tracy", mobile: "(555)1234-1256"},
#   ...
# ]
#
# groups: [
#   {id: "1", name: "Collegue"},
#   {id: "2", name: "Friend"},
#   ...
# ]
#
# contacts_groups: [
#    {id: "1", contactId: "1", groupId: "1"},
#    {id: "2", contactId: "1", groupId: "2"},
#    ...
# ]


### 1. Get all Contacts
GET http://{{url}}/contacts

### 2. Get all Contacts with their Groups (embeded)
GET http://{{url}}/contacts?_embed=groups

### 3. Get a Contact
GET http://{{url}}/contacts/1

### 4. Get a Contact with the Groups he belongs to (embeded)
GET http://{{url}}/contacts/1?_embed=groups

### 5. Get all Groups
GET http://{{url}}/groups

### 6. Get all Groups with their Contacts
GET http://{{url}}/groups?_embed=contacts

### 7. Get a Group
GET http://{{url}}/groups/1

### 8. Get a Group with the Contacts in it (embeded)
GET http://{{url}}/groups/1?_embed=contacts

### 9. Create a Contact
# @name addContact
POST http://{{url}}/contacts
Content-Type: application/json

{"name":"Smith", "mobile":"(666)1234-8976"}

### 10. Put the contact into groups of 1,3
@id = {{addContact.response.body.$.data.id}}

PATCH http://{{url}}/contacts/{{id}}
Content-Type: application/json

{"groups": [1,3]}

### Confirm 
GET http://{{url}}/contacts/{{id}}?_embed=groups

###
GET http://{{url}}/groups/1?_embed=contacts

### 
GET http://{{url}}/groups/3?_embed=contacts


### 
DELETE http://{{url}}/contacts/{{id}}


### 
DELETE 


###
POST http://{{url}}/contacts
Content-Type: application/json

{
    "name": "Jane Doe",
    "mobile": "11111111",
    "groups": [1,2,3]
}